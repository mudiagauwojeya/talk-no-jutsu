{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","src/js/helper.js","src/js/UI/UI.js","src/js/config.js","src/js/state.js","src/js/components/spinner.js","src/js/app.js"],"names":["removeActiveClass","selector","elements","document","querySelectorAll","forEach","element","classList","remove","fetchQuote","url","fetch","requestQuote","ok","Error","statusText","json","quote","console","error","UI","menu","querySelector","randomBtn","getElementById","form","event","activeTab","target","activeSection","dataset","slice","add","addEventListener","switchTab","fetchQuoteHandler","bind","handleSubmit","data","viewElement","textContent","innerHTML","character","anime","API_ENDPOINT","type","params","manga","quotes","favorites","Spinner","toggleModalAndSpinner","toggle","template","templateContent","importNode","content","spinner","body","insertAdjacentElement","scrollIntoView","behavior","ui","navigate","fetchRandomQuote","then","concat","randomQuote","render","catch","message","getRandomQuote","show"],"mappings":";AAAA;AACA,AMDA;ANEA;AACA,AMFA;ANGA;AACA,AMHA,AFFO,IAAM+C,KAAK,GAAG;AJMrB,AENA,ACAA,AFCA,AGACC,EAAAA,MAAM,EAAE,EADY;AJOrB,AMJA,AHFO,ACCNC,EAAAA,EDDYL,OCCH,EAAE,GDDa,GAAG,SAAfA,YAAe,GAAqB;AHOjD,AGPiD,ACD5B,CAAd,KDCsBC,IAAoB,uEAAb,QAAa;AHQjD,AMLA,AHFC,MAAMC,MAAM,GACXD,IAAI,KAAK,WAAT,GAAuB,WAAvB,GAAqCA,IAAI,KAAK,OAAT,GAAmB,OAAnB,GAA6BA,IADnE;AHQD,AGNC,oDAA2CC,MAA3C;AHOD,AGNC,CAJM;AHWP,ACTA;ADUA,ACTO,IAAM9C,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,QAAD,EAAc;ADU/C,AEZA,ADGC,IILKiD,EJKChD,QAAQ,GAAGC,QAAQ,CAACC,gBAAT,CAA0BH,QAA1B,CAAjB;ADUD,ACTCC,EAAAA,ECFKkB,MDEG,CAACf,OAAT,CAAiB,UAACC,OAAD,EAAa;ADU/B,AEXC,ADECA,IAAAA,OAAO,CAACC,ICFK,KDEb,CAAkBC,MAAlB,CAAyB,QAAzB;ADUF,AEZe,ADGb,GAFD;ADYD,ACTC,CALM,EAOP,mCIVY;ALkBZ,AEbE,SAAKa,IAAL,GAAYlB,QAAQ,CAACmB,aAAT,CAAuB,gBAAvB,CAAZ;AFcF,AEbE,SAAKC,SAAL,GAAiBpB,QAAQ,CAACqB,cAAT,CAAwB,AGLxB,aHKA,CAAjB;AFcF,AEbE,SAAKC,IAAL,GAAYtB,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAZ;AFcF,AEbE;AFcF,ACXO,IAAMK,UAAU;ADYvB,ACZuB,qEAAG,iBAAOC,GAAP;ADa1B,AMnBA,ALM0B,IKNpBoD,EAAE,GAAG,EDcV,ECdc1C,WAAJ,EAAX,CDcQ;ALMR,AMnBA,ADcE8B,AJTwB,IKLpBO,EDcJP,KHVD,AIJY,EDcJ,CCdO,ADcNC,ICdUD,YJITxB,IIJK,CJIf,AGUC,CCdF,ADcgC,CHVd,CIFlB,GDYE;ALMF,AEfE,AIDF,ADWE,AJVwB,UCAlBC,SAAS,GAAGD,KAAK,CAACE,MAAxB;AFgBF,AEfE,ADDwB,WCCnBC,aAAL,GAAqB1B,QAAQ,CAACqB,cAAT,CACpBG,SAAS,CAACG,OAAV,CAAkBF,MAAlB,CAAyBG,KAAzB,CAA+B,CAA/B,CADoB,CAArB;AFgBF,AEbE,AIJF+B,ALA0B,EKAxB,CAACC,QAAH,IAEA,sBJEoB,4BAAlB;AFcF,AEbE,ADLwB,WIYzB,gBAAO,UHPY,mBAAlB;AFcF,AEbEpC,AIHF,ADUEuB,AJbwB,IKGpBc,EJGJrC,AGOAuB,OAAO,CAACC,CHPC,CAAC5C,IIHU,GAAG,EJGvB,CAAoByB,GAApB,CAAwB,EIHpBgC,GDUJ,GHPA,UIHuB,GAAM;ANiB/B,AEbE,AIHD,ADUC,AJdwB,WCOnBnC,QDLsBlB,KCK3B,ADLgC,CCKbJ,ADLcG,CKEvB,ELFsB,CAFR,KCOxB,CAA6BsB,GAA7B,CAAiC,QAAjC,MIHD,EACEiC,IADF,CACO,UAAC3B,IAAD,EAAU;ANgBlB,AEbE,AIFC,QAAMrB,KAAK,GAAGqB,IAAd;ANgBH,ACtB0B;ADuB1B,AMhBG,ALLK1B,WIVP,CJUOA,YAFkB,OKODmC,aAAMC,ADfc,MCepB,CAAakB,MAAb,CAAoBjD,KAApB,CAAtB;ANiBH,AMjBG,ADf0C,UAAfmC,CHkB7B,KGlB4C,eHkBjC,wDGlB2B,IAAM;ALiC7C,AEdE,AIJC,ADdD,AJOwB,QKOhBe,GJIH9C,AGlBAgC,IHkBL,CAAUpB,ADRLrB,GKIJ,ADdD,GAAgBT,MJUC,CAACU,CIVM,CAACW,AJOD,CCWxB,CAA2B,OAA3B,EAAoC,GGlBpB,CAAwB,CHkBCU,SAAzC,AGlBgB,CAAhB;ALiCF,AEdE,AGlBA,AJMwB,WINnBoB,eAAL,GAAuBnD,QAAQ,CAACoD,UAAT,CAAoB,KAAKF,QAAL,CAAcG,OAAlC,EAA2C,IAA3C,CAAvB;ALiCF,AMnBGM,ADbD,AJKwB,IKQvBA,EAAE,CAACM,IDbCX,ECaJ,CAAUU,IDbX,GAAe,ICad,CDbmBb,eAAL,CAAqBhC,aAArB,CAAmC,UAAnC,CAAf;ALiCF,AMnBG,ALTuB,GKIzB,EAME+C,KANF,CAMQ,UAAClD,KAAD,EAAW;ANmBpB,AMlBGD,ADdD,ICcCA,MDdG,CHiBL,AIHS,ADdHkC,CCcIjC,KAAR,ADdD,CCceA,CDdF,ICcO,CAACmD,OAApB,IJGanC,iBAAf,EAAkC;AFgBnC,AEfE,AIHC,ADdA,AJEuB,GKIzB,QJWMZ,EGjBCkC,KJKsB,ECY5B,AGjBC,CHiBcxB,AGjBD1B,CJKkBO,KAAJ,CAAUF,EILrC,CAAuBJ,MHiBxB,AGjBC,CHiB+B,AGjBD,EJKmB,CAACO,ICYnD,CGjBC,CHiBwCoB,IDZb,CAHJ,YCekC,CAACC,IAAlB,CAAuB,IAAvB,CAAzC;AFgBF,AEfE,AIHD,ADdE,CCIH,EAYA;ANiBA,AKhCG,AJAuB;ADiC1B,ACjC0B;ADkC1B,AMlBA0B,ADdE,AJFwB,EKgBxB,CAACS,QJEF,AGhBMd,MCcP,CAAkBO,ADdhB,CAAazD,AJEOK,SIFpB,CAAuBoB,EHgBb,ADdsB,CIFhC,AJEiChB,CIFN,CCc7B,ELZsB,EAJI,GIExB;ALiCF,AEjBY,AIAZyC,ADfEtD,MAAAA,CCeK,CAACqE,IAAR,EDfU,CAACd,IAAT,CAAcC,qBAAd,CAAoC,YAApC,EAAkD,KAAKF,OAAvD,EAX2C,CAY3C;ALgCF,ACpC0B;ADqC1B,AElBE,AGdA,AJDMxC,WCeDQ,AGdAgC,CJDCxC,GCeN,CAAUZ,CDnBc,CIKxB,CAAauD,IHcb,CAAkB,SGdlB,CHcmBnC,AGdS,IHcV;AFmBpB,AEnBoB,AGdYoC,AJLN,QIKMA,OHe7BpC,CGfqC,EAAE,CHenC,CAACQ,gBAAL,CAAsB,QAAtB,ADfMhB,ECe0B,GDpBT,ECoBa,CAACoB,YAAL,CAAkBD,IAAlB,CAAuB,KAAvB,CAAhC,CADiB;AFoBpB,AEpBoB,AGdU,OHc5B,AGdA;ALmCF,AElBE,AGhBA,AJNwB;ADyC1B,ACzC0B;AD0C1B,AC1C0B;AD2C1B,ACpCE,WCiBD,gBAAOE,IAAP,EAAa;AFoBd,AEnBE,ADjBApB,WCiBKqB,CDjBLrB,OAAO,CAACC,ECiBR,GAAmBhB,ADjBnB,QCiB2B,CAACmB,aAAT,CAClB,4CADkB,CAAnB;AFoBF,AEjBE,WAAKiB,WAAL,CAAiBC,WAAjB,GAA+B,EAA/B;AFkBF,AEjBE,AD7BwB,WC6BnBD,IGZQW,OHYb,CAAiBT,SAAjB,sEACkDH,IAAI,CAACI,SADvD,8DACkHJ,IAAI,CAACK,KADvH,6EAE6CL,IAAI,CAACrB,KAFlD;AFkBF,AEdE,ADjCwB;ADgD1B,AChD0B;ADiD1B;AACA,AClD0B;ADmD1B,ACnD0B;ADoD1B,ACpD0B;ADqD1B,ACrD0B,eCoCXG;AFkBf,ACtD0B;ADuD1B,ACvD0B;ADwD1B,ACxD0B,GAAH;ADyDvB;AACA,AC1DuB,kBAAVX,UAAU;AD2DvB,AC3DuB;AD4DvB,AC5DuB;AD6DvB,AC7DuB,GAAhfile":"app.77c12427.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","//Add helper functions for the project here\r\nimport \"regenerator-runtime/runtime\";\r\n\r\n//helper function to remove active class from selected element\r\nexport const removeActiveClass = (selector) => {\r\n\tconst elements = document.querySelectorAll(selector);\r\n\telements.forEach((element) => {\r\n\t\telement.classList.remove(\"active\");\r\n\t});\r\n};\r\n\r\n//helper function to fetch data from server\r\nexport const fetchQuote = async (url) => {\r\n\ttry {\r\n\t\tconst requestQuote = await fetch(url);\r\n\t\tif (!requestQuote.ok) throw new Error(requestQuote.statusText);\r\n\t\tconst quote = await requestQuote.json();\r\n\t\treturn quote;\r\n\t} catch (error) {\r\n\t\t//handle error\r\n\t\tconsole.error(error);\r\n\t} finally {\r\n\t\t//hide spinner\r\n\t}\r\n};\r\n","import { removeActiveClass } from \"../helper\";\r\n\r\n//all what is rendered goes here\r\n\r\nclass UI {\r\n\tconstructor() {\r\n\t\tthis.menu = document.querySelector(\".sidebar__menu\");\r\n\t\tthis.randomBtn = document.getElementById(\"random__btn\");\r\n\t\tthis.form = document.querySelectorAll(\".form\");\r\n\t}\r\n\r\n\tswitchTab(event) {\r\n\t\tconst activeTab = event.target;\r\n\t\tthis.activeSection = document.getElementById(\r\n\t\t\tactiveTab.dataset.target.slice(1)\r\n\t\t);\r\n\t\tremoveActiveClass(\".sidebar__menu__item__link\");\r\n\t\tremoveActiveClass(\".content__section\");\r\n\t\tactiveTab.classList.add(\"active\");\r\n\t\tthis.activeSection.classList.add(\"active\");\r\n\t}\r\n\r\n\tnavigate() {\r\n\t\tthis.menu.addEventListener(\"click\", this.switchTab);\r\n\t}\r\n\r\n\tgetRandomQuote(fetchQuoteHandler) {\r\n\t\tthis.randomBtn.addEventListener(\"click\", fetchQuoteHandler.bind(this));\r\n\t}\r\n\r\n\tgetQuote() {\r\n\t\tthis.form.forEach((form) =>\r\n\t\t\tform.addEventListener(\"submit\", this.handleSubmit.bind(this))\r\n\t\t);\r\n\t}\r\n\r\n\trender(data) {\r\n\t\tthis.viewElement = document.querySelector(\r\n\t\t\t\".content .active .content__section--quotes\"\r\n\t\t);\r\n\t\tthis.viewElement.textContent = \"\";\r\n\t\tthis.viewElement.innerHTML = `\r\n\t\t\t<h3 class=\"content__section--quotes-character\">${data.character}: <span class=\"content__section--quotes-anime\">${data.anime}</span></h3>\r\n\t\t\t<p class=\"content__section--quotes-quote\">${data.quote}</p>\r\n\t\t`;\r\n\t}\r\n}\r\n\r\nexport default UI;\r\n","//Add the configuration files for the project here\r\nexport const API_ENDPOINT = (type = \"random\") => {\r\n\tconst params =\r\n\t\ttype === \"character\" ? \"character\" : type === \"title\" ? \"title\" : type;\r\n\treturn `https://animechan.vercel.app/api/${params}`;\r\n};\r\n","export const manga = {\r\n\tquotes: [],\r\n\tfavorites: [],\r\n};\r\n","class Spinner {\r\n\ttemplate = null;\r\n\ttemplateContent = null;\r\n\r\n\tstatic toggleModalAndSpinner(toggle = true) {\r\n\t\tthis.template = document.getElementById(\"template\");\r\n\t\tthis.templateContent = document.importNode(this.template.content, true);\r\n\t\tthis.spinner = this.templateContent.querySelector(\".spinner\");\r\n\r\n\t\tif (!toggle) {\r\n\t\t\tthis.spinner.classList.remove(\"active\");\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tthis.spinner.classList.add(\"active\");\r\n\t\tdocument.body.insertAdjacentElement(\"afterbegin\", this.spinner);\r\n\t\t//REVIEW: add the top property to control the scroll\r\n\t\tthis.spinner.scrollIntoView({ behavior: \"smooth\" });\r\n\t}\r\n\r\n\thide() {\r\n\t\tSpinner.toggleModalAndSpinner(false);\r\n\t}\r\n\r\n\tshow() {\r\n\t\tSpinner.toggleModalAndSpinner();\r\n\t}\r\n}\r\n\r\nexport default Spinner;\r\n","import UI from \"./UI/UI\";\r\nimport { API_ENDPOINT } from \"./config\";\r\nimport { fetchQuote } from \"./helper\";\r\nimport { manga } from \"./state\";\r\nimport Spinner from \"./components/spinner\";\r\n\r\nconst ui = new UI();\r\nconst spinner = new Spinner();\r\n\r\n//TODO: add a DOMContentLoaded event to fetch a random quote initially\r\n\r\n//navigate sidebar tabs\r\nui.navigate();\r\n\r\n//fetch random quotes\r\nconst fetchRandomQuote = () => {\r\n\tfetchQuote(API_ENDPOINT())\r\n\t\t.then((data) => {\r\n\t\t\tconst quote = data;\r\n\t\t\tconst [randomQuote] = manga.quotes.concat(quote);\r\n\t\t\tui.render(randomQuote);\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tconsole.error(error.message);\r\n\t\t});\r\n};\r\n\r\n//fetch random quote\r\nui.getRandomQuote(fetchRandomQuote);\r\n\r\nspinner.show();\r\n"]}